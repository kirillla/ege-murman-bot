import sqlite3, datetime, asyncio, logging
from bs4 import BeautifulSoup

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import RestrictChatMember
from aiogram.types import ChatActions
from aiogram.utils.markdown import hlink

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException

token = "" # –í–∞—à —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot,storage=storage)

global start_text
start_text = """
üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ï–ì–≠-–ú—É—Ä–º–∞–Ω—Å–∫! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞ –≤ –≤–∞—à–µ–º –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ –ï–ì–≠. –ù–∞—à–∞ —Ü–µ–ª—å - –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ –ø–æ–º–æ—á—å –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.
‚úÖ–ó–∞–±—É–¥—å—Ç–µ –æ –¥–æ–ª–≥–∏—Ö –ø–æ–∏—Å–∫–∞—Ö –∏ –Ω–µ—É–¥–æ–±–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö. –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —É–¥–æ–±–Ω—É—é –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è!\n\nüöÄ–ù–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –í–ø–µ—Ä–µ–¥, –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –∏ –ª—É—á—à–µ–º—É –±—É–¥—É—â–µ–º—É!
"""

class go(StatesGroup):
	reg1 = State()
	reg2 = State()
	reg3 = State()
	reg4 = State()
	reg5 = State()
	
@dp.message_handler()
async def start(message: types.Message,state: FSMContext):
	global connect
	connect = sqlite3.connect('users.db', check_same_thread=False)
	global cursor
	cursor= connect.cursor()

	if message.text == '/start':
		today = datetime.datetime.today()
		f = '–°—Ç–∞—Ä—Ç '+ str(message.chat.id) + ' ' + today.strftime("%Y-%m-%d-%H.%M.%S")
		print(f)
		
		cursor.execute("""CREATE TABLE IF NOT EXISTS users(
				id INTEGER, username TEXT, fam TEXT, name TEXT, otch TEXT, ser TEXT, num TEXT 
			)""")
		connect.commit()
		
		userid = message.chat.id
		cursor.execute(f"SELECT * FROM users WHERE id = {userid}")
		data = cursor.fetchone()
		if data is None:
			cursor.execute("INSERT INTO users(id, username, fam) VALUES(?,?,?);", (message.chat.id, message.chat.username,'None'))
			connect.commit()
			await bot.send_message(message.chat.id, start_text)
			await reg(message, state)
		elif data[2] == 'None':
			await reg(message, state)
		else:
			await mainmenu(message, state)

	elif message.text == '/change':
		await reg(message, state)


async def reg(message,state: FSMContext):
	await bot.send_message(message.chat.id, 'üìä–í–≤–µ–¥–∏—Ç–µ <i>—Ñ–∞–º–∏–ª–∏—é</i>:','HTML')
	await go.reg1.set()

@dp.message_handler(state=go.reg1)
async def reg1(message,state: FSMContext):
	async with state.proxy() as data:
		data['fam'] = message.text
	await message.delete()
	await bot.send_message(message.chat.id, 'üìä–í–≤–µ–¥–∏—Ç–µ <i>–∏–º—è</i>:','HTML')
	await go.reg2.set()

@dp.message_handler(state=go.reg2)
async def reg2(message,state: FSMContext):
	async with state.proxy() as data:
		data['name'] = message.text
	await message.delete()
	await bot.send_message(message.chat.id, 'üìä–í–≤–µ–¥–∏—Ç–µ <i>–æ—Ç—á–µ—Å—Ç–≤–æ</i>:','HTML')
	await go.reg3.set()

@dp.message_handler(state=go.reg3)
async def reg3(message,state: FSMContext):
	async with state.proxy() as data:
		data['otch'] = message.text
	await message.delete()
	await bot.send_message(message.chat.id, '#Ô∏è‚É£–í–≤–µ–¥–∏—Ç–µ <i>—Å–µ—Ä–∏—é</i> –ø–∞—Å–ø–æ—Ä—Ç–∞:','HTML')
	await go.reg4.set()

@dp.message_handler(state=go.reg4)
async def reg4(message,state: FSMContext):
	async with state.proxy() as data:
		data['ser'] = message.text
	await message.delete()
	await bot.send_message(message.chat.id, '#Ô∏è‚É£–í–≤–µ–¥–∏—Ç–µ <i>–Ω–æ–º–µ—Ä</i> –ø–∞—Å–ø–æ—Ä—Ç–∞:','HTML')
	await go.reg5.set()

@dp.message_handler(state=go.reg5)
async def reg5(message,state: FSMContext):
	async with state.proxy() as data:
		fam = data['fam']
		name = data['name']
		otch = data['otch']
		ser = data['ser']
	num = message.text
	await state.finish()
	await message.delete()
	try:
		test = int(ser)
		test = int(num)
	except ValueError:
		cursor.execute(f"UPDATE users SET fam = 'None' WHERE id = " + str(message.chat.id))
		connect.commit()
		await bot.send_message(message.chat.id, '‚õîÔ∏è–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
		await reg(message, state)
	else:
		cursor.execute(f"UPDATE users SET fam = '{fam}' WHERE id = " + str(message.chat.id))
		cursor.execute(f"UPDATE users SET name = '{name}' WHERE id = " + str(message.chat.id))
		cursor.execute(f"UPDATE users SET otch = '{otch}' WHERE id = " + str(message.chat.id))
		cursor.execute(f"UPDATE users SET ser = '{ser}' WHERE id = " + str(message.chat.id))
		cursor.execute(f"UPDATE users SET num = '{num}' WHERE id = " + str(message.chat.id))
		connect.commit()

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text="‚úÖ–í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="yes"))
		keyboard.add(types.InlineKeyboardButton(text="üîÑ–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="no"))
		text = f'üîé–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n<b>–§–∞–º–∏–ª–∏—è</b>: {fam}\n<b>–ò–º—è</b>: {name}\n<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: {otch}\n<b>–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞</b>: <i>{ser}</i>\n<b>–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞</b>: <i>{num}</i>'
		await bot.send_message(message.chat.id, text, 'HTML', reply_markup=keyboard)


@dp.callback_query_handler(text="yes")
async def yes(call: types.CallbackQuery,state: FSMContext):
	await call.message.edit_text(text="‚è±–í–∞—à –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...\n\n‚òïÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞ —á—Ç–æ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç 1 –¥–æ 10 –º–∏–Ω—É—Ç)\n\n‚ö†Ô∏è–ù–∞—á–∏–Ω–∞—è —Å 6 –∏—é–Ω—è, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ")
	await zapr(call.message,state)

@dp.callback_query_handler(text="no")
async def no(call: types.CallbackQuery,state: FSMContext):
	await call.message.delete()
	await reg(call.message, state)


async def zapr(message,state: FSMContext):
	today = datetime.datetime.today()
	f = '–ó–∞–ø—Ä–æ—Å '+ str(message.chat.id) + ' ' + today.strftime("%Y-%m-%d-%H.%M.%S")
	print(f)
	cursor.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
	data = cursor.fetchone()
	options = Options()
	
	options.add_argument("start-maximized")
	options.add_argument("enable-automation")
	options.add_argument("--headless")
	options.add_argument("--no-sandbox")
	options.add_argument("--disable-dev-shm-usage")
	options.add_argument("--disable-browser-side-navigation")
	options.add_argument("--disable-gpu")
	
	driver = webdriver.Chrome(options=options)

	driver.set_page_load_timeout(10)
	try:
		driver.get('http://gia.edunord.ru/res_ege.shtml')
	except:
		#print('except')
		driver.find_element("xpath","//input[@name='fam']").send_keys(data[2])
		driver.find_element("xpath","//input[@name='name']").send_keys(data[3])
		driver.find_element("xpath","//input[@name='otch']").send_keys(data[4])
		driver.find_element("xpath","//input[@name='ser']").send_keys(data[5])
		driver.find_element("xpath","//input[@name='num']").send_keys(data[6])
		#print('ok')
		driver.set_page_load_timeout(1000)
		driver.find_element("xpath","//input[@type='submit']").click()
	page = driver.page_source
	driver.quit()

	if '–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É' in page:
		cursor.execute(f"UPDATE users SET fam = 'None' WHERE id = " + str(message.chat.id))
		connect.commit()
		await bot.send_message(message.chat.id, '‚õîÔ∏è–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
		await reg(message,state)
	else:
		soup = BeautifulSoup(page, "lxml")
		rez = []
		rezp = []
		for i in soup.find_all('div',attrs={'class':'results'}):
			rezp.append(i.find('h3').text)
			for n in i.find_all('table',attrs={'class':'results-sub'}):
				mask = []
				for j in n.find_all('td'):
					mask.append(j.text)
			rezp.append(mask)
			for h in i.find_all('table',attrs={'class':'results-main'}):
				alll = []
				for d in h.find_all('tr'):
					kek = []
					for nb in d.find_all('font'):
						fff = nb.text
						fff = fff.replace('\t','')
						fff = fff.replace('\n','')
						kek.append(fff)
					alll.append(kek)
				rezp.append(alll)
		rez = rezp
		for i in range(len(rez)//3):
			i = i*3
			text = f"""
			üéì<b>{rez[i]}</b>\n\n
			üîë<b>–ú–∞—Å–∫–∞:</b>\n<i>{rez[i + 1][3]}</i> {rez[i + 1][4]} <b>{rez[i + 1][5]}</b>\n<i>{rez[i+1][6]}</i> {rez[i+1][7]} <b>{rez[i+1][8]}</b>\n\n
			üí°<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n<i>{rez[i+2][0][0]}</i>: <code>{rez[i+2][0][1]}</code>\n<i>{rez[i+2][1][0]}</i>: <code>{rez[i+2][1][1]}</code>\n<i>{rez[i+2][2][0]}</i>: <code>{rez[i+2][2][1]}</code>\n<i>{rez[i+2][3][0]}</i>: <code>{rez[i+2][3][1]}</code>
			"""

			await bot.send_message(message.chat.id, text, 'HTML')
		await mainmenu(message,state)

async def mainmenu(message, state):
	cursor.execute(f"SELECT * FROM users WHERE id = {message.chat.id}")
	data = cursor.fetchone()
	keyboard = types.InlineKeyboardMarkup()
	keyboard.add(types.InlineKeyboardButton(text="üîé–£–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="yes"))
	keyboard.add(types.InlineKeyboardButton(text="üÜï–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="no"))
	await bot.send_message(message.chat.id, f'üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {data[3]}\n–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)


async def main():
	await dp.start_polling(bot)


if __name__ == '__main__':
	asyncio.run(main())